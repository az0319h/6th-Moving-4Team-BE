generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id             String     @id @default(uuid())
  email          String     @unique
  name           String
  phone          String     @unique
  hashedPassword String?
  profileImage   String?
  provider       Provider   @default(LOCAL)
  providerId     String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  serviceType    MoveType[]
  livingArea     Region[]

  requests      Request[]
  estimates     Estimate[]
  reviews       Review[]
  favorites     Favorite[]
  notifications Notification[]
}

model Region {
  id         String @id @default(uuid())
  regionName String @unique

  clients Client[]
  movers  Mover[]
}

model Mover {
  id                  String     @id @default(uuid())
  email               String     @unique
  name                String
  nickName            String?    @unique
  phone               String     @unique
  hashedPassword      String?
  profileImage        String?
  provider            Provider   @default(LOCAL)
  providerId          String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  career              Int?
  introduction        String?
  description         String?
  serviceType         MoveType[]
  serviceArea         Region[]
  favoriteCount       Int        @default(0)
  estimateCount       Int        @default(0)
  averageReviewRating Float      @default(0)
  reviewCount         Int        @default(0)

  estimates     Estimate[]
  reviews       Review[]
  favorites     Favorite[]
  notifications Notification[]
}

model Estimate {
  id                String         @id @default(uuid())
  clientId          String
  moverId           String
  requestId         String
  price             Int?
  moverStatus       EstimateStatus
  isClientConfirmed Boolean        @default(false)
  comment           String
  createdAt         DateTime       @default(now())

  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  mover   Mover   @relation(fields: [moverId], references: [id], onDelete: Cascade)
  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  review  Review?

  @@unique([requestId, moverId])
  @@index([clientId])
}

model Request {
  id           String   @id @default(uuid())
  clientId     String
  moverId      String?
  estimateId   String?  @unique
  moveType     MoveType
  moveDate     DateTime
  fromAddress  String
  toAddress    String
  isDesignated Boolean  @default(false)
  isPending    Boolean  @default(true)
  requestedAt  DateTime @default(now())

  client   Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  estimate Estimate[]
}

model Review {
  id         String   @id @default(uuid())
  rating     Int      @default(0)
  content    String
  createdAt  DateTime @default(now())
  clientId   String
  moverId    String
  estimateId String   @unique

  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  mover    Mover    @relation(fields: [moverId], references: [id], onDelete: Cascade)
  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(uuid())
  clientId  String
  moverId   String
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  type      NotificationType

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  mover  Mover? @relation(fields: [moverId], references: [id], onDelete: Cascade)
}

model Favorite {
  id       String @id @default(uuid())
  clientId String
  moverId  String

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  mover  Mover  @relation(fields: [moverId], references: [id], onDelete: Cascade)

  @@unique([clientId, moverId])
}

enum Provider {
  LOCAL
  GOOGLE
  KAKAO
  NAVER
}

enum MoveType {
  SMALL
  HOME
  OFFICE
}

enum EstimateStatus {
  CONFIRMED
  REJECTED
}

enum NotificationType {
  NEW_ESTIMATE
  ESTIMATE_CONFIRMED
  MOVING_DAY
}
